
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Apr 24 18:40:02 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny1;
import alex.UnidadLexica;
import errors.GestionErroresTiny1;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Apr 24 18:40:02 CEST 2021
  */
public class AnalizadorSintacticoTiny1_CUP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny1_CUP() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny1_CUP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny1_CUP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\010\000" +
    "\002\006\003\000\002\006\002\000\002\007\003\000\002" +
    "\007\005\000\002\010\005\000\002\010\004\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\010\000\002\011\006\000" +
    "\002\011\004\000\002\012\004\000\002\012\006\000\002" +
    "\013\003\000\002\013\005\000\002\014\005\000\002\014" +
    "\007\000\002\014\011\000\002\014\007\000\002\014\004" +
    "\000\002\014\004\000\002\014\003\000\002\014\004\000" +
    "\002\014\004\000\002\014\007\000\002\014\003\000\002" +
    "\015\003\000\002\015\002\000\002\016\003\000\002\016" +
    "\005\000\002\017\003\000\002\017\002\000\002\020\005" +
    "\000\002\020\004\000\002\021\005\000\002\021\005\000" +
    "\002\021\003\000\002\022\005\000\002\022\003\000\002" +
    "\023\005\000\002\023\003\000\002\024\005\000\002\024" +
    "\003\000\002\025\004\000\002\025\004\000\002\025\003" +
    "\000\002\026\004\000\002\026\003\000\002\027\004\000" +
    "\002\027\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\005\000\002\031\003" +
    "\000\002\031\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\034\003\000\002\034\003\000\002\035\005" +
    "\000\002\036\004\000\002\036\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\060\012\ufffe\013\ufffe\014\ufffe\015\004\016" +
    "\012\017\010\020\ufffe\021\ufffe\025\ufffe\030\ufffe\035\ufffe" +
    "\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\053\ufffe\054\ufffe\057\ufffe\063\ufffe\001\002" +
    "\000\022\004\016\005\022\006\015\007\023\031\017\032" +
    "\014\034\021\043\020\001\002\000\052\012\076\013\101" +
    "\014\116\020\124\021\103\025\074\030\073\035\120\036" +
    "\122\037\070\040\110\041\125\042\072\043\105\044\121" +
    "\045\123\053\071\054\111\057\115\063\055\001\002\000" +
    "\004\002\067\001\002\000\006\047\ufffd\051\ufffd\001\002" +
    "\000\004\043\046\001\002\000\006\047\044\051\043\001" +
    "\002\000\022\004\016\005\022\006\015\007\023\031\017" +
    "\032\014\034\021\043\020\001\002\000\004\043\042\001" +
    "\002\000\004\061\035\001\002\000\006\043\ufff0\067\ufff0" +
    "\001\002\000\006\043\ufff2\067\ufff2\001\002\000\004\063" +
    "\025\001\002\000\006\043\uffee\067\uffee\001\002\000\022" +
    "\004\016\005\022\006\015\007\023\031\017\032\014\034" +
    "\021\043\020\001\002\000\006\043\ufff1\067\ufff1\001\002" +
    "\000\006\043\uffef\067\uffef\001\002\000\006\043\uffeb\067" +
    "\uffeb\001\002\000\022\004\016\005\022\006\015\007\023" +
    "\031\017\032\014\034\021\043\020\001\002\000\004\043" +
    "\034\001\002\000\006\047\031\064\030\001\002\000\006" +
    "\043\uffec\067\uffec\001\002\000\022\004\016\005\022\006" +
    "\015\007\023\031\017\032\014\034\021\043\020\001\002" +
    "\000\004\043\033\001\002\000\006\047\uffe9\064\uffe9\001" +
    "\002\000\006\047\uffea\064\uffea\001\002\000\004\044\036" +
    "\001\002\000\004\062\037\001\002\000\004\033\040\001" +
    "\002\000\022\004\016\005\022\006\015\007\023\031\017" +
    "\032\014\034\021\043\020\001\002\000\006\043\uffed\067" +
    "\uffed\001\002\000\006\047\ufffa\051\ufffa\001\002\000\052" +
    "\012\uffff\013\uffff\014\uffff\020\uffff\021\uffff\025\uffff\030" +
    "\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff" +
    "\043\uffff\044\uffff\045\uffff\053\uffff\054\uffff\057\uffff\063" +
    "\uffff\001\002\000\010\015\004\016\012\017\010\001\002" +
    "\000\006\047\ufffc\051\ufffc\001\002\000\004\057\047\001" +
    "\002\000\024\004\016\005\022\006\015\007\023\031\017" +
    "\032\014\034\021\043\020\060\ufff7\001\002\000\006\046" +
    "\065\060\ufff8\001\002\000\006\043\062\067\063\001\002" +
    "\000\006\046\ufff6\060\ufff6\001\002\000\004\060\054\001" +
    "\002\000\004\063\055\001\002\000\062\012\ufffe\013\ufffe" +
    "\014\ufffe\015\004\016\012\017\010\020\ufffe\021\ufffe\025" +
    "\ufffe\030\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\045\ufffe\053\ufffe\054\ufffe\057" +
    "\ufffe\063\ufffe\064\057\001\002\000\006\047\ufff9\051\ufff9" +
    "\001\002\000\020\002\uffd4\023\uffd4\024\uffd4\027\uffd4\047" +
    "\uffd4\051\uffd4\064\uffd4\001\002\000\004\064\061\001\002" +
    "\000\020\002\uffd5\023\uffd5\024\uffd5\027\uffd5\047\uffd5\051" +
    "\uffd5\064\uffd5\001\002\000\006\046\ufff3\060\ufff3\001\002" +
    "\000\004\043\064\001\002\000\006\046\ufff4\060\ufff4\001" +
    "\002\000\022\004\016\005\022\006\015\007\023\031\017" +
    "\032\014\034\021\043\020\001\002\000\006\046\ufff5\060" +
    "\ufff5\001\002\000\004\002\000\001\002\000\030\012\076" +
    "\013\101\014\116\020\124\042\072\043\105\044\121\045" +
    "\123\053\071\054\111\057\115\001\002\000\024\013\101" +
    "\014\116\020\124\042\072\043\105\044\121\045\123\054" +
    "\111\057\115\001\002\000\072\002\uffbf\010\uffbf\011\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\026\uffbf\027\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\064\uffbf\065\uffbf\066\uffbf\070" +
    "\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\001\002" +
    "\000\004\043\214\001\002\000\030\012\076\013\101\014" +
    "\116\020\124\042\072\043\105\044\121\045\123\053\071" +
    "\054\111\057\115\001\002\000\010\002\001\047\167\064" +
    "\001\001\002\000\030\012\076\013\101\014\116\020\124" +
    "\042\072\043\105\044\121\045\123\053\071\054\111\057" +
    "\115\001\002\000\072\002\uffc4\010\uffc4\011\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\026\uffc4\027\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\060\uffc4" +
    "\061\uffc4\062\uffc4\064\uffc4\065\uffc4\066\uffc4\070\uffc4\071" +
    "\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\001\002\000\072" +
    "\002\uffc6\010\uffc6\011\uffc6\022\uffc6\023\uffc6\024\uffc6\026" +
    "\uffc6\027\uffc6\046\uffc6\047\uffc6\050\uffc6\052\uffc6\053\uffc6" +
    "\054\uffc6\055\uffc6\056\uffc6\060\uffc6\061\uffc6\062\uffc6\064" +
    "\uffc6\065\uffc6\066\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6" +
    "\074\uffc6\075\uffc6\001\002\000\072\002\uffc1\010\uffc1\011" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\026\uffc1\027\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\001" +
    "\002\000\072\002\uffc8\010\uffc8\011\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\026\uffc8\027\uffc8\046\uffc8\047\uffc8\050\uffc8\052" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\060\uffc8\061\176" +
    "\062\uffc8\064\uffc8\065\177\066\175\070\uffc8\071\uffc8\072" +
    "\uffc8\073\uffc8\074\uffc8\075\uffc8\001\002\000\030\012\076" +
    "\013\101\014\116\020\124\042\072\043\105\044\121\045" +
    "\123\053\071\054\111\057\115\001\002\000\064\002\uffcb" +
    "\010\uffcb\011\uffcb\022\uffcb\023\uffcb\024\uffcb\026\uffcb\027" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\052\uffcb\053\uffcb\054\161" +
    "\055\160\056\156\060\uffcb\062\uffcb\064\uffcb\070\uffcb\071" +
    "\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\001\002\000\072" +
    "\002\uffbe\010\uffbe\011\uffbe\022\uffbe\023\uffbe\024\uffbe\026" +
    "\uffbe\027\uffbe\046\uffbe\047\uffbe\050\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\060\uffbe\061\uffbe\062\uffbe\064" +
    "\uffbe\065\uffbe\066\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe" +
    "\074\uffbe\075\uffbe\001\002\000\016\002\uffe8\023\uffe8\024" +
    "\uffe8\027\uffe8\047\uffe8\064\uffe8\001\002\000\056\002\uffcd" +
    "\010\uffcd\011\uffcd\022\uffcd\023\uffcd\024\uffcd\026\uffcd\027" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\052\uffcd\053\uffcd\060\uffcd" +
    "\062\uffcd\064\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074" +
    "\uffcd\075\uffcd\001\002\000\030\012\076\013\101\014\116" +
    "\020\124\042\072\043\105\044\121\045\123\053\071\054" +
    "\111\057\115\001\002\000\024\013\101\014\116\020\124" +
    "\042\072\043\105\044\121\045\123\054\111\057\115\001" +
    "\002\000\056\002\uffcf\010\uffcf\011\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\026\uffcf\027\uffcf\046\uffcf\047\uffcf\050\uffcf\052" +
    "\uffcf\053\uffcf\060\uffcf\062\uffcf\064\uffcf\070\147\071\150" +
    "\072\145\073\144\074\143\075\142\001\002\000\042\002" +
    "\uffd1\010\135\011\140\022\uffd1\023\uffd1\024\uffd1\026\uffd1" +
    "\027\uffd1\046\uffd1\047\uffd1\050\uffd1\052\134\053\136\060" +
    "\uffd1\062\uffd1\064\uffd1\001\002\000\004\050\132\001\002" +
    "\000\030\012\076\013\101\014\116\020\124\042\072\043" +
    "\105\044\121\045\123\053\071\054\111\057\115\001\002" +
    "\000\072\002\uffc0\010\uffc0\011\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\026\uffc0\027\uffc0\046\uffc0\047\uffc0\050\uffc0\052\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\056\uffc0\060\uffc0\061\uffc0\062" +
    "\uffc0\064\uffc0\065\uffc0\066\uffc0\070\uffc0\071\uffc0\072\uffc0" +
    "\073\uffc0\074\uffc0\075\uffc0\001\002\000\016\002\uffdc\023" +
    "\uffdc\024\uffdc\027\uffdc\047\uffdc\064\uffdc\001\002\000\030" +
    "\012\076\013\101\014\116\020\124\042\072\043\105\044" +
    "\121\045\123\053\071\054\111\057\115\001\002\000\072" +
    "\002\uffc3\010\uffc3\011\uffc3\022\uffc3\023\uffc3\024\uffc3\026" +
    "\uffc3\027\uffc3\046\uffc3\047\uffc3\050\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\060\uffc3\061\uffc3\062\uffc3\064" +
    "\uffc3\065\uffc3\066\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3" +
    "\074\uffc3\075\uffc3\001\002\000\030\012\076\013\101\014" +
    "\116\020\124\042\072\043\105\044\121\045\123\053\071" +
    "\054\111\057\115\001\002\000\072\002\uffc2\010\uffc2\011" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\027\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\060\uffc2\061\uffc2\062\uffc2\064\uffc2\065\uffc2\066\uffc2" +
    "\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\001" +
    "\002\000\072\002\uffbd\010\uffbd\011\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\026\uffbd\027\uffbd\046\uffbd\047\uffbd\050\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\060\uffbd\061\uffbd" +
    "\062\uffbd\064\uffbd\065\uffbd\066\uffbd\070\uffbd\071\uffbd\072" +
    "\uffbd\073\uffbd\074\uffbd\075\uffbd\001\002\000\016\002\uffe0" +
    "\023\uffe0\024\uffe0\027\uffe0\047\uffe0\064\uffe0\001\002\000" +
    "\016\002\uffde\023\uffde\024\uffde\027\uffde\047\uffde\064\uffde" +
    "\001\002\000\016\002\uffdf\023\uffdf\024\uffdf\027\uffdf\047" +
    "\uffdf\064\uffdf\001\002\000\004\060\131\001\002\000\072" +
    "\002\uffbc\010\uffbc\011\uffbc\022\uffbc\023\uffbc\024\uffbc\026" +
    "\uffbc\027\uffbc\046\uffbc\047\uffbc\050\uffbc\052\uffbc\053\uffbc" +
    "\054\uffbc\055\uffbc\056\uffbc\060\uffbc\061\uffbc\062\uffbc\064" +
    "\uffbc\065\uffbc\066\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc" +
    "\074\uffbc\075\uffbc\001\002\000\030\012\076\013\101\014" +
    "\116\020\124\042\072\043\105\044\121\045\123\053\071" +
    "\054\111\057\115\001\002\000\016\002\uffe6\023\uffe6\024" +
    "\uffe6\027\uffe6\047\uffe6\064\uffe6\001\002\000\030\012\076" +
    "\013\101\014\116\020\124\042\072\043\105\044\121\045" +
    "\123\053\071\054\111\057\115\001\002\000\030\012\uffbb" +
    "\013\uffbb\014\uffbb\020\uffbb\042\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\053\uffbb\054\uffbb\057\uffbb\001\002\000\030\012\076" +
    "\013\101\014\116\020\124\042\072\043\105\044\121\045" +
    "\123\053\071\054\111\057\115\001\002\000\030\012\076" +
    "\013\101\014\116\020\124\042\072\043\105\044\121\045" +
    "\123\053\071\054\111\057\115\001\002\000\030\012\uffba" +
    "\013\uffba\014\uffba\020\uffba\042\uffba\043\uffba\044\uffba\045" +
    "\uffba\053\uffba\054\uffba\057\uffba\001\002\000\056\002\uffd0" +
    "\010\uffd0\011\uffd0\022\uffd0\023\uffd0\024\uffd0\026\uffd0\027" +
    "\uffd0\046\uffd0\047\uffd0\050\uffd0\052\uffd0\053\uffd0\060\uffd0" +
    "\062\uffd0\064\uffd0\070\147\071\150\072\145\073\144\074" +
    "\143\075\142\001\002\000\030\012\uffb4\013\uffb4\014\uffb4" +
    "\020\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\053\uffb4\054" +
    "\uffb4\057\uffb4\001\002\000\030\012\uffb9\013\uffb9\014\uffb9" +
    "\020\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\053\uffb9\054" +
    "\uffb9\057\uffb9\001\002\000\030\012\uffb5\013\uffb5\014\uffb5" +
    "\020\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\053\uffb5\054" +
    "\uffb5\057\uffb5\001\002\000\030\012\uffb6\013\uffb6\014\uffb6" +
    "\020\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\053\uffb6\054" +
    "\uffb6\057\uffb6\001\002\000\030\012\076\013\101\014\116" +
    "\020\124\042\072\043\105\044\121\045\123\053\071\054" +
    "\111\057\115\001\002\000\030\012\uffb8\013\uffb8\014\uffb8" +
    "\020\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\053\uffb8\054" +
    "\uffb8\057\uffb8\001\002\000\030\012\uffb7\013\uffb7\014\uffb7" +
    "\020\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\053\uffb7\054" +
    "\uffb7\057\uffb7\001\002\000\056\002\uffce\010\uffce\011\uffce" +
    "\022\uffce\023\uffce\024\uffce\026\uffce\027\uffce\046\uffce\047" +
    "\uffce\050\uffce\052\uffce\053\uffce\060\uffce\062\uffce\064\uffce" +
    "\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce\001" +
    "\002\000\032\002\uffd2\022\uffd2\023\uffd2\024\uffd2\026\uffd2" +
    "\027\uffd2\046\uffd2\047\uffd2\050\uffd2\060\uffd2\062\uffd2\064" +
    "\uffd2\001\002\000\032\002\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\026\uffd3\027\uffd3\046\uffd3\047\uffd3\050\uffd3\060\uffd3\062" +
    "\uffd3\064\uffd3\001\002\000\072\002\uffc5\010\uffc5\011\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5" +
    "\060\uffc5\061\uffc5\062\uffc5\064\uffc5\065\uffc5\066\uffc5\070" +
    "\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\001\002" +
    "\000\016\002\uffe1\023\uffe1\024\uffe1\027\uffe1\047\uffe1\064" +
    "\uffe1\001\002\000\030\012\uffb1\013\uffb1\014\uffb1\020\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\045\uffb1\053\uffb1\054\uffb1\057" +
    "\uffb1\001\002\000\030\012\076\013\101\014\116\020\124" +
    "\042\072\043\105\044\121\045\123\053\071\054\111\057" +
    "\115\001\002\000\030\012\uffb2\013\uffb2\014\uffb2\020\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\053\uffb2\054\uffb2\057" +
    "\uffb2\001\002\000\030\012\uffb3\013\uffb3\014\uffb3\020\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\053\uffb3\054\uffb3\057" +
    "\uffb3\001\002\000\056\002\uffcc\010\uffcc\011\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\026\uffcc\027\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\052\uffcc\053\uffcc\060\uffcc\062\uffcc\064\uffcc\070\uffcc" +
    "\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\001\002\000" +
    "\004\022\164\001\002\000\056\012\076\013\101\014\116" +
    "\020\124\021\103\023\uffd6\024\uffd6\025\074\030\073\035" +
    "\120\036\122\037\070\040\110\041\125\042\072\043\105" +
    "\044\121\045\123\053\071\054\111\057\115\063\055\001" +
    "\002\000\006\023\171\024\172\001\002\000\012\023\uffd7" +
    "\024\uffd7\027\uffd7\047\167\001\002\000\052\012\076\013" +
    "\101\014\116\020\124\021\103\025\074\030\073\035\120" +
    "\036\122\037\070\040\110\041\125\042\072\043\105\044" +
    "\121\045\123\053\071\054\111\057\115\063\055\001\002" +
    "\000\016\002\uffe7\023\uffe7\024\uffe7\027\uffe7\047\uffe7\064" +
    "\uffe7\001\002\000\054\012\076\013\101\014\116\020\124" +
    "\021\103\024\uffd6\025\074\030\073\035\120\036\122\037" +
    "\070\040\110\041\125\042\072\043\105\044\121\045\123" +
    "\053\071\054\111\057\115\063\055\001\002\000\016\002" +
    "\uffe5\023\uffe5\024\uffe5\027\uffe5\047\uffe5\064\uffe5\001\002" +
    "\000\004\024\174\001\002\000\016\002\uffe4\023\uffe4\024" +
    "\uffe4\027\uffe4\047\uffe4\064\uffe4\001\002\000\004\043\206" +
    "\001\002\000\030\012\076\013\101\014\116\020\124\042" +
    "\072\043\105\044\121\045\123\053\071\054\111\057\115" +
    "\001\002\000\004\043\203\001\002\000\072\002\uffb0\010" +
    "\uffb0\011\uffb0\022\uffb0\023\uffb0\024\uffb0\026\uffb0\027\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\060\uffb0\061\uffb0\062\uffb0\064\uffb0\065\uffb0" +
    "\066\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075" +
    "\uffb0\001\002\000\072\002\uffc7\010\uffc7\011\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\026\uffc7\027\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\060\uffc7" +
    "\061\uffc7\062\uffc7\064\uffc7\065\uffc7\066\uffc7\070\uffc7\071" +
    "\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\001\002\000\072" +
    "\002\uffaf\010\uffaf\011\uffaf\022\uffaf\023\uffaf\024\uffaf\026" +
    "\uffaf\027\uffaf\046\uffaf\047\uffaf\050\uffaf\052\uffaf\053\uffaf" +
    "\054\uffaf\055\uffaf\056\uffaf\060\uffaf\061\uffaf\062\uffaf\064" +
    "\uffaf\065\uffaf\066\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf" +
    "\074\uffaf\075\uffaf\001\002\000\072\002\uffad\010\uffad\011" +
    "\uffad\022\uffad\023\uffad\024\uffad\026\uffad\027\uffad\046\uffad" +
    "\047\uffad\050\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056" +
    "\uffad\060\uffad\061\uffad\062\uffad\064\uffad\065\uffad\066\uffad" +
    "\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad\001" +
    "\002\000\004\062\205\001\002\000\072\002\uffae\010\uffae" +
    "\011\uffae\022\uffae\023\uffae\024\uffae\026\uffae\027\uffae\046" +
    "\uffae\047\uffae\050\uffae\052\uffae\053\uffae\054\uffae\055\uffae" +
    "\056\uffae\060\uffae\061\uffae\062\uffae\064\uffae\065\uffae\066" +
    "\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae" +
    "\001\002\000\072\002\uffac\010\uffac\011\uffac\022\uffac\023" +
    "\uffac\024\uffac\026\uffac\027\uffac\046\uffac\047\uffac\050\uffac" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\060\uffac\061" +
    "\uffac\062\uffac\064\uffac\065\uffac\066\uffac\070\uffac\071\uffac" +
    "\072\uffac\073\uffac\074\uffac\075\uffac\001\002\000\064\002" +
    "\uffc9\010\uffc9\011\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9" +
    "\027\uffc9\046\uffc9\047\uffc9\050\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\060\uffc9\062\uffc9\064\uffc9\070\uffc9" +
    "\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\001\002\000" +
    "\004\026\211\001\002\000\054\012\076\013\101\014\116" +
    "\020\124\021\103\025\074\027\uffd6\030\073\035\120\036" +
    "\122\037\070\040\110\041\125\042\072\043\105\044\121" +
    "\045\123\053\071\054\111\057\115\063\055\001\002\000" +
    "\004\027\213\001\002\000\016\002\uffe3\023\uffe3\024\uffe3" +
    "\027\uffe3\047\uffe3\064\uffe3\001\002\000\004\057\215\001" +
    "\002\000\032\012\076\013\101\014\116\020\124\042\072" +
    "\043\105\044\121\045\123\053\071\054\111\057\115\060" +
    "\uffda\001\002\000\006\046\uffd9\060\uffd9\001\002\000\006" +
    "\046\222\060\uffdb\001\002\000\004\060\221\001\002\000" +
    "\016\002\uffdd\023\uffdd\024\uffdd\027\uffdd\047\uffdd\064\uffdd" +
    "\001\002\000\030\012\076\013\101\014\116\020\124\042" +
    "\072\043\105\044\121\045\123\053\071\054\111\057\115" +
    "\001\002\000\006\046\uffd8\060\uffd8\001\002\000\072\002" +
    "\uffca\010\uffca\011\uffca\022\uffca\023\uffca\024\uffca\026\uffca" +
    "\027\uffca\046\uffca\047\uffca\050\uffca\052\uffca\053\uffca\054" +
    "\uffca\055\uffca\056\uffca\060\uffca\061\176\062\uffca\064\uffca" +
    "\065\177\066\175\070\uffca\071\uffca\072\uffca\073\uffca\074" +
    "\uffca\075\uffca\001\002\000\016\002\uffe2\023\uffe2\024\uffe2" +
    "\027\uffe2\047\uffe2\064\uffe2\001\002\000\004\043\227\001" +
    "\002\000\006\047\ufffb\051\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\012\002\005\003\004\004\010\005\006\001" +
    "\001\000\004\011\225\001\001\000\030\013\074\014\105" +
    "\020\116\021\113\022\112\023\111\024\106\025\103\026" +
    "\101\027\077\030\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\025\012\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\052\007\047\010\051\011\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\055\001\001\000\012\002\057\003\004\004\010" +
    "\005\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\065\011\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\021\224" +
    "\022\112\023\111\024\106\025\103\026\101\027\077\030" +
    "\076\001\001\000\010\026\223\027\077\030\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\207\022" +
    "\112\023\111\024\106\025\103\026\101\027\077\030\076" +
    "\001\001\000\002\001\001\000\012\025\206\026\101\027" +
    "\077\030\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\034\200\035\177\036\201\001" +
    "\001\000\022\021\162\022\112\023\111\024\106\025\103" +
    "\026\101\027\077\030\076\001\001\000\004\033\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\021\154\022\112\023\111\024\106\025\103\026" +
    "\101\027\077\030\076\001\001\000\006\027\153\030\076" +
    "\001\001\000\004\032\145\001\001\000\004\031\136\001" +
    "\001\000\002\001\001\000\022\021\127\022\112\023\111" +
    "\024\106\025\103\026\101\027\077\030\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\126\022\112" +
    "\023\111\024\106\025\103\026\101\027\077\030\076\001" +
    "\001\000\002\001\001\000\022\021\125\022\112\023\111" +
    "\024\106\025\103\026\101\027\077\030\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\021\132\022\112\023\111\024\106\025\103" +
    "\026\101\027\077\030\076\001\001\000\002\001\001\000" +
    "\022\021\152\022\112\023\111\024\106\025\103\026\101" +
    "\027\077\030\076\001\001\000\002\001\001\000\022\021" +
    "\151\022\112\023\111\024\106\025\103\026\101\027\077" +
    "\030\076\001\001\000\016\023\140\024\106\025\103\026" +
    "\101\027\077\030\076\001\001\000\002\001\001\000\004" +
    "\032\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\024\150\025\103" +
    "\026\101\027\077\030\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\161\026\101\027\077\030\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\013\165\014\105\017\164\020\116" +
    "\021\113\022\112\023\111\024\106\025\103\026\101\027" +
    "\077\030\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\167\020\116\021\113\022\112\023\111\024" +
    "\106\025\103\026\101\027\077\030\076\001\001\000\002" +
    "\001\001\000\032\013\165\014\105\017\172\020\116\021" +
    "\113\022\112\023\111\024\106\025\103\026\101\027\077" +
    "\030\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\203\022\112" +
    "\023\111\024\106\025\103\026\101\027\077\030\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\013\165\014\105\017\211\020\116\021" +
    "\113\022\112\023\111\024\106\025\103\026\101\027\077" +
    "\030\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\015\217\016\216\021\215\022\112" +
    "\023\111\024\106\025\103\026\101\027\077\030\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\021\222\022\112\023\111\024" +
    "\106\025\103\026\101\027\077\030\076\001\001\000\002" +
    "\001\001\000\010\034\200\035\177\036\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny1_CUP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny1_CUP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny1_CUP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	errores = new GestionErroresTiny1();
	AnalizadorLexicoTiny1 alex = (AnalizadorLexicoTiny1) getScanner();
	alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	private GestionErroresTiny1 errores;
	public void syntax_error(Symbol unidadLexica) {
		errores.errorSintactico((UnidadLexica) unidadLexica);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny1_CUP$actions {
  private final AnalizadorSintacticoTiny1_CUP parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny1_CUP$actions(AnalizadorSintacticoTiny1_CUP parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny1_CUP$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny1_CUP$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny1_CUP$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny1_CUP$stack,
    int                        CUP$AnalizadorSintacticoTiny1_CUP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny1_CUP$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny1_CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= Decs LInsts 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny1_CUP$stack.elementAt(CUP$AnalizadorSintacticoTiny1_CUP$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny1_CUP$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decs ::= LDecs SEPSEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Decs",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decs ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Decs",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDecs ::= Dec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("LDecs",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LDecs ::= LDecs PUNTOCOMA Dec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("LDecs",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dec ::= VAR Tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= TYPE Tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Dec ::= PROC ID PAP ParamsF PCIE Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ParamsF ::= LParamsF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("ParamsF",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ParamsF ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("ParamsF",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LParamsF ::= ParamF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("LParamsF",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LParamsF ::= LParamsF COMA ParamF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("LParamsF",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ParamF ::= Tipo AMP ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("ParamF",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ParamF ::= Tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("ParamF",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= TIPOINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= TIPOREAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= TIPOBOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= TIPOSTRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= ARRAY CAP ENTERO CCIE OF Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= RECORD LLAP LTipos LLCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= POINTER Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LTipos ::= Tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("LTipos",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LTipos ::= LTipos PUNTOCOMA Tipo ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("LTipos",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LInsts ::= Inst 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("LInsts",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LInsts ::= LInsts PUNTOCOMA Inst 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("LInsts",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Inst ::= E0 ASIG E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Inst ::= IF E0 THEN Insts ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Inst ::= IF E0 THEN Insts ELSE Insts ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Inst ::= WHILE E0 DO Insts ENDWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Inst ::= READ E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Inst ::= WRITE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Inst ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Inst ::= NEW E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Inst ::= DELETE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Inst ::= CALL ID PAP ParamsR PCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Inst ::= Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ParamsR ::= LParamsR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("ParamsR",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ParamsR ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("ParamsR",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LParamsR ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("LParamsR",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LParamsR ::= LParamsR COMA E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("LParamsR",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Insts ::= LInsts 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Insts",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Insts ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Insts",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Bloque ::= LLAP S LLCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Bloque",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Bloque ::= LLAP LLCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("Bloque",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E0 ::= E1 MAS E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E0",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E0 ::= E1 MENOS E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E0",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E0",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E1 ::= E1 OpAI1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E2 ::= E2 OpAI2 E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E3 ::= E4 OpNA3 E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E3",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E3",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E4 ::= MENOS E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E4",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E4 ::= NOT E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E4",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E4",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E5 ::= E5 OpPA5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E5",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E5",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E6 ::= POR E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E6",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E6",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E7 ::= ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E7 ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E7 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E7 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E7 ::= CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E7 ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= PAP E0 PCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OpAI1 ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("OpAI1",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OpAI1 ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("OpAI1",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OpAI2 ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("OpAI2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OpAI2 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("OpAI2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OpAI2 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("OpAI2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OpAI2 ::= MENIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("OpAI2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OpAI2 ::= MAYIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("OpAI2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OpAI2 ::= DIST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("OpAI2",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OpNA3 ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("OpNA3",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OpNA3 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("OpNA3",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OpNA3 ::= MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("OpNA3",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OpPA5 ::= OpIndex 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("OpPA5",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OpPA5 ::= OpReg 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("OpPA5",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OpIndex ::= CAP E0 CCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("OpIndex",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OpReg ::= PUNTO ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("OpReg",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OpReg ::= FLECHA ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1_CUP$result = parser.getSymbolFactory().newSymbol("OpReg",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1_CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny1_CUP$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny1_CUP$do_action(
    int                        CUP$AnalizadorSintacticoTiny1_CUP$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny1_CUP$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny1_CUP$stack,
    int                        CUP$AnalizadorSintacticoTiny1_CUP$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny1_CUP$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny1_CUP$act_num,
                               CUP$AnalizadorSintacticoTiny1_CUP$parser,
                               CUP$AnalizadorSintacticoTiny1_CUP$stack,
                               CUP$AnalizadorSintacticoTiny1_CUP$top);
    }
}

