
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun May 30 02:07:49 CEST 2021
//----------------------------------------------------

package c_ast_ascendente;

import java_cup.runtime.*;
import semops.SemOps;
import asint.Tiny1Asint.*;
import errors.GestionErroresTiny1;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun May 30 02:07:49 CEST 2021
  */
public class ConstructorAST_Asc extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorAST_Asc() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorAST_Asc(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorAST_Asc(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\010\000" +
    "\002\006\003\000\002\006\002\000\002\007\003\000\002" +
    "\007\005\000\002\010\005\000\002\010\004\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\010\000\002\011\006\000" +
    "\002\011\004\000\002\012\004\000\002\012\006\000\002" +
    "\013\003\000\002\013\005\000\002\014\005\000\002\014" +
    "\007\000\002\014\011\000\002\014\007\000\002\014\004" +
    "\000\002\014\004\000\002\014\003\000\002\014\004\000" +
    "\002\014\004\000\002\014\007\000\002\014\003\000\002" +
    "\015\003\000\002\015\002\000\002\016\003\000\002\016" +
    "\005\000\002\017\003\000\002\017\002\000\002\020\005" +
    "\000\002\020\004\000\002\021\005\000\002\021\005\000" +
    "\002\021\003\000\002\022\005\000\002\022\003\000\002" +
    "\023\005\000\002\023\003\000\002\024\005\000\002\024" +
    "\003\000\002\025\004\000\002\025\004\000\002\025\003" +
    "\000\002\026\006\000\002\026\005\000\002\026\005\000" +
    "\002\026\003\000\002\027\004\000\002\027\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\005\000\002\031\003\000\002\031\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\060\012\ufffe\013\ufffe\014\ufffe\015\004\016" +
    "\012\017\010\020\ufffe\021\ufffe\025\ufffe\030\ufffe\035\ufffe" +
    "\036\ufffe\037\ufffe\040\ufffe\041\ufffe\046\ufffe\051\ufffe\055" +
    "\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe\075\ufffe\001\002" +
    "\000\022\004\016\005\022\006\015\007\023\031\017\032" +
    "\014\034\021\071\020\001\002\000\052\012\076\013\100" +
    "\014\116\020\124\021\103\025\074\030\073\035\120\036" +
    "\122\037\070\040\110\041\125\046\105\051\115\055\055" +
    "\070\072\071\111\072\121\073\123\075\071\001\002\000" +
    "\004\002\067\001\002\000\006\043\ufffd\045\ufffd\001\002" +
    "\000\004\071\046\001\002\000\006\043\044\045\043\001" +
    "\002\000\022\004\016\005\022\006\015\007\023\031\017" +
    "\032\014\034\021\071\020\001\002\000\004\071\042\001" +
    "\002\000\004\053\035\001\002\000\006\061\ufff0\071\ufff0" +
    "\001\002\000\006\061\ufff2\071\ufff2\001\002\000\004\055" +
    "\025\001\002\000\006\061\uffee\071\uffee\001\002\000\022" +
    "\004\016\005\022\006\015\007\023\031\017\032\014\034" +
    "\021\071\020\001\002\000\006\061\ufff1\071\ufff1\001\002" +
    "\000\006\061\uffef\071\uffef\001\002\000\006\061\uffeb\071" +
    "\uffeb\001\002\000\022\004\016\005\022\006\015\007\023" +
    "\031\017\032\014\034\021\071\020\001\002\000\004\071" +
    "\034\001\002\000\006\043\031\056\030\001\002\000\006" +
    "\061\uffec\071\uffec\001\002\000\022\004\016\005\022\006" +
    "\015\007\023\031\017\032\014\034\021\071\020\001\002" +
    "\000\004\071\033\001\002\000\006\043\uffe9\056\uffe9\001" +
    "\002\000\006\043\uffea\056\uffea\001\002\000\004\072\036" +
    "\001\002\000\004\054\037\001\002\000\004\033\040\001" +
    "\002\000\022\004\016\005\022\006\015\007\023\031\017" +
    "\032\014\034\021\071\020\001\002\000\006\061\uffed\071" +
    "\uffed\001\002\000\006\043\ufffa\045\ufffa\001\002\000\052" +
    "\012\uffff\013\uffff\014\uffff\020\uffff\021\uffff\025\uffff\030" +
    "\uffff\035\uffff\036\uffff\037\uffff\040\uffff\041\uffff\046\uffff" +
    "\051\uffff\055\uffff\070\uffff\071\uffff\072\uffff\073\uffff\075" +
    "\uffff\001\002\000\010\015\004\016\012\017\010\001\002" +
    "\000\006\043\ufffc\045\ufffc\001\002\000\004\051\047\001" +
    "\002\000\024\004\016\005\022\006\015\007\023\031\017" +
    "\032\014\034\021\052\ufff7\071\020\001\002\000\006\042" +
    "\065\052\ufff8\001\002\000\006\061\063\071\062\001\002" +
    "\000\006\042\ufff6\052\ufff6\001\002\000\004\052\054\001" +
    "\002\000\004\055\055\001\002\000\062\012\ufffe\013\ufffe" +
    "\014\ufffe\015\004\016\012\017\010\020\ufffe\021\ufffe\025" +
    "\ufffe\030\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\046\ufffe\051\ufffe\055\ufffe\056\057\070\ufffe\071\ufffe\072" +
    "\ufffe\073\ufffe\075\ufffe\001\002\000\006\043\ufff9\045\ufff9" +
    "\001\002\000\020\002\uffd4\023\uffd4\024\uffd4\027\uffd4\043" +
    "\uffd4\045\uffd4\056\uffd4\001\002\000\004\056\061\001\002" +
    "\000\020\002\uffd5\023\uffd5\024\uffd5\027\uffd5\043\uffd5\045" +
    "\uffd5\056\uffd5\001\002\000\006\042\ufff3\052\ufff3\001\002" +
    "\000\004\071\064\001\002\000\006\042\ufff4\052\ufff4\001" +
    "\002\000\022\004\016\005\022\006\015\007\023\031\017" +
    "\032\014\034\021\071\020\001\002\000\006\042\ufff5\052" +
    "\ufff5\001\002\000\004\002\000\001\002\000\030\012\076" +
    "\013\100\014\116\020\124\046\105\051\115\070\072\071" +
    "\111\072\121\073\123\075\071\001\002\000\024\013\100" +
    "\014\116\020\124\046\105\051\115\070\072\071\111\072" +
    "\121\073\123\001\002\000\072\002\uffbd\010\uffbd\011\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\026\uffbd\027\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\046\uffbd\047\uffbd\050\uffbd\052\uffbd\053\uffbd" +
    "\054\uffbd\056\uffbd\057\uffbd\060\uffbd\062\uffbd\063\uffbd\064" +
    "\uffbd\065\uffbd\066\uffbd\067\uffbd\074\uffbd\075\uffbd\001\002" +
    "\000\004\071\211\001\002\000\030\012\076\013\100\014" +
    "\116\020\124\046\105\051\115\070\072\071\111\072\121" +
    "\073\123\075\071\001\002\000\010\002\001\043\167\056" +
    "\001\001\002\000\030\012\076\013\100\014\116\020\124" +
    "\046\105\051\115\070\072\071\111\072\121\073\123\075" +
    "\071\001\002\000\072\002\uffc2\010\uffc2\011\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\026\uffc2\027\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\052\uffc2\053\uffc2\054\uffc2" +
    "\056\uffc2\057\uffc2\060\uffc2\062\uffc2\063\uffc2\064\uffc2\065" +
    "\uffc2\066\uffc2\067\uffc2\074\uffc2\075\uffc2\001\002\000\072" +
    "\002\uffbf\010\uffbf\011\uffbf\022\uffbf\023\uffbf\024\uffbf\026" +
    "\uffbf\027\uffbf\042\uffbf\043\uffbf\044\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\052\uffbf\053\uffbf\054\uffbf\056\uffbf\057\uffbf\060" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf" +
    "\074\uffbf\075\uffbf\001\002\000\072\002\uffc4\010\uffc4\011" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\026\uffc4\027\uffc4\042\uffc4" +
    "\043\uffc4\044\uffc4\046\uffc4\047\uffc4\050\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\056\uffc4\057\uffc4\060\uffc4\062\uffc4\063\uffc4" +
    "\064\uffc4\065\uffc4\066\uffc4\067\uffc4\074\uffc4\075\uffc4\001" +
    "\002\000\072\002\uffc8\010\uffc8\011\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\026\uffc8\027\uffc8\042\uffc8\043\uffc8\044\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\052\uffc8\053\176\054\uffc8\056\uffc8" +
    "\057\177\060\175\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\067\uffc8\074\uffc8\075\uffc8\001\002\000\030\012\076" +
    "\013\100\014\116\020\124\046\105\051\115\070\072\071" +
    "\111\072\121\073\123\075\071\001\002\000\064\002\uffcb" +
    "\010\uffcb\011\uffcb\022\uffcb\023\uffcb\024\uffcb\026\uffcb\027" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\046\161\047\160\050\156" +
    "\052\uffcb\054\uffcb\056\uffcb\062\uffcb\063\uffcb\064\uffcb\065" +
    "\uffcb\066\uffcb\067\uffcb\074\uffcb\075\uffcb\001\002\000\024" +
    "\013\100\014\116\020\124\046\105\051\115\070\072\071" +
    "\111\072\121\073\123\001\002\000\016\002\uffe8\023\uffe8" +
    "\024\uffe8\027\uffe8\043\uffe8\056\uffe8\001\002\000\056\002" +
    "\uffcd\010\uffcd\011\uffcd\022\uffcd\023\uffcd\024\uffcd\026\uffcd" +
    "\027\uffcd\042\uffcd\043\uffcd\044\uffcd\052\uffcd\054\uffcd\056" +
    "\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd" +
    "\074\uffcd\075\uffcd\001\002\000\030\012\076\013\100\014" +
    "\116\020\124\046\105\051\115\070\072\071\111\072\121" +
    "\073\123\075\071\001\002\000\072\002\uffbc\010\uffbc\011" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\026\uffbc\027\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\046\uffbc\047\uffbc\050\uffbc\052\uffbc\053" +
    "\uffbc\054\uffbc\056\uffbc\057\uffbc\060\uffbc\062\uffbc\063\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\067\uffbc\074\uffbc\075\uffbc\001" +
    "\002\000\056\002\uffcf\010\uffcf\011\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\026\uffcf\027\uffcf\042\uffcf\043\uffcf\044\uffcf\052" +
    "\uffcf\054\uffcf\056\uffcf\062\147\063\150\064\145\065\144" +
    "\066\143\067\142\074\uffcf\075\uffcf\001\002\000\042\002" +
    "\uffd1\010\135\011\140\022\uffd1\023\uffd1\024\uffd1\026\uffd1" +
    "\027\uffd1\042\uffd1\043\uffd1\044\uffd1\052\uffd1\054\uffd1\056" +
    "\uffd1\074\134\075\136\001\002\000\004\044\132\001\002" +
    "\000\030\012\076\013\100\014\116\020\124\046\105\051" +
    "\115\070\072\071\111\072\121\073\123\075\071\001\002" +
    "\000\072\002\uffbe\010\uffbe\011\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\026\uffbe\027\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\052\uffbe\053\uffbe\054\uffbe\056\uffbe\057" +
    "\uffbe\060\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe" +
    "\067\uffbe\074\uffbe\075\uffbe\001\002\000\016\002\uffdc\023" +
    "\uffdc\024\uffdc\027\uffdc\043\uffdc\056\uffdc\001\002\000\030" +
    "\012\076\013\100\014\116\020\124\046\105\051\115\070" +
    "\072\071\111\072\121\073\123\075\071\001\002\000\072" +
    "\002\uffc1\010\uffc1\011\uffc1\022\uffc1\023\uffc1\024\uffc1\026" +
    "\uffc1\027\uffc1\042\uffc1\043\uffc1\044\uffc1\046\uffc1\047\uffc1" +
    "\050\uffc1\052\uffc1\053\uffc1\054\uffc1\056\uffc1\057\uffc1\060" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1" +
    "\074\uffc1\075\uffc1\001\002\000\030\012\076\013\100\014" +
    "\116\020\124\046\105\051\115\070\072\071\111\072\121" +
    "\073\123\075\071\001\002\000\072\002\uffc0\010\uffc0\011" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0\027\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\046\uffc0\047\uffc0\050\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\056\uffc0\057\uffc0\060\uffc0\062\uffc0\063\uffc0" +
    "\064\uffc0\065\uffc0\066\uffc0\067\uffc0\074\uffc0\075\uffc0\001" +
    "\002\000\072\002\uffbb\010\uffbb\011\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\026\uffbb\027\uffbb\042\uffbb\043\uffbb\044\uffbb\046" +
    "\uffbb\047\uffbb\050\uffbb\052\uffbb\053\uffbb\054\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066" +
    "\uffbb\067\uffbb\074\uffbb\075\uffbb\001\002\000\016\002\uffe0" +
    "\023\uffe0\024\uffe0\027\uffe0\043\uffe0\056\uffe0\001\002\000" +
    "\016\002\uffde\023\uffde\024\uffde\027\uffde\043\uffde\056\uffde" +
    "\001\002\000\016\002\uffdf\023\uffdf\024\uffdf\027\uffdf\043" +
    "\uffdf\056\uffdf\001\002\000\004\052\131\001\002\000\072" +
    "\002\uffba\010\uffba\011\uffba\022\uffba\023\uffba\024\uffba\026" +
    "\uffba\027\uffba\042\uffba\043\uffba\044\uffba\046\uffba\047\uffba" +
    "\050\uffba\052\uffba\053\uffba\054\uffba\056\uffba\057\uffba\060" +
    "\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066\uffba\067\uffba" +
    "\074\uffba\075\uffba\001\002\000\030\012\076\013\100\014" +
    "\116\020\124\046\105\051\115\070\072\071\111\072\121" +
    "\073\123\075\071\001\002\000\016\002\uffe6\023\uffe6\024" +
    "\uffe6\027\uffe6\043\uffe6\056\uffe6\001\002\000\030\012\076" +
    "\013\100\014\116\020\124\046\105\051\115\070\072\071" +
    "\111\072\121\073\123\075\071\001\002\000\030\012\uffb9" +
    "\013\uffb9\014\uffb9\020\uffb9\046\uffb9\051\uffb9\070\uffb9\071" +
    "\uffb9\072\uffb9\073\uffb9\075\uffb9\001\002\000\030\012\076" +
    "\013\100\014\116\020\124\046\105\051\115\070\072\071" +
    "\111\072\121\073\123\075\071\001\002\000\030\012\076" +
    "\013\100\014\116\020\124\046\105\051\115\070\072\071" +
    "\111\072\121\073\123\075\071\001\002\000\030\012\uffb8" +
    "\013\uffb8\014\uffb8\020\uffb8\046\uffb8\051\uffb8\070\uffb8\071" +
    "\uffb8\072\uffb8\073\uffb8\075\uffb8\001\002\000\056\002\uffd0" +
    "\010\uffd0\011\uffd0\022\uffd0\023\uffd0\024\uffd0\026\uffd0\027" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\052\uffd0\054\uffd0\056\uffd0" +
    "\062\147\063\150\064\145\065\144\066\143\067\142\074" +
    "\uffd0\075\uffd0\001\002\000\030\012\uffb2\013\uffb2\014\uffb2" +
    "\020\uffb2\046\uffb2\051\uffb2\070\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\075\uffb2\001\002\000\030\012\uffb7\013\uffb7\014\uffb7" +
    "\020\uffb7\046\uffb7\051\uffb7\070\uffb7\071\uffb7\072\uffb7\073" +
    "\uffb7\075\uffb7\001\002\000\030\012\uffb3\013\uffb3\014\uffb3" +
    "\020\uffb3\046\uffb3\051\uffb3\070\uffb3\071\uffb3\072\uffb3\073" +
    "\uffb3\075\uffb3\001\002\000\030\012\uffb4\013\uffb4\014\uffb4" +
    "\020\uffb4\046\uffb4\051\uffb4\070\uffb4\071\uffb4\072\uffb4\073" +
    "\uffb4\075\uffb4\001\002\000\030\012\076\013\100\014\116" +
    "\020\124\046\105\051\115\070\072\071\111\072\121\073" +
    "\123\075\071\001\002\000\030\012\uffb6\013\uffb6\014\uffb6" +
    "\020\uffb6\046\uffb6\051\uffb6\070\uffb6\071\uffb6\072\uffb6\073" +
    "\uffb6\075\uffb6\001\002\000\030\012\uffb5\013\uffb5\014\uffb5" +
    "\020\uffb5\046\uffb5\051\uffb5\070\uffb5\071\uffb5\072\uffb5\073" +
    "\uffb5\075\uffb5\001\002\000\056\002\uffce\010\uffce\011\uffce" +
    "\022\uffce\023\uffce\024\uffce\026\uffce\027\uffce\042\uffce\043" +
    "\uffce\044\uffce\052\uffce\054\uffce\056\uffce\062\uffce\063\uffce" +
    "\064\uffce\065\uffce\066\uffce\067\uffce\074\uffce\075\uffce\001" +
    "\002\000\032\002\uffd2\022\uffd2\023\uffd2\024\uffd2\026\uffd2" +
    "\027\uffd2\042\uffd2\043\uffd2\044\uffd2\052\uffd2\054\uffd2\056" +
    "\uffd2\001\002\000\032\002\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\026\uffd3\027\uffd3\042\uffd3\043\uffd3\044\uffd3\052\uffd3\054" +
    "\uffd3\056\uffd3\001\002\000\016\002\uffe1\023\uffe1\024\uffe1" +
    "\027\uffe1\043\uffe1\056\uffe1\001\002\000\072\002\uffc3\010" +
    "\uffc3\011\uffc3\022\uffc3\023\uffc3\024\uffc3\026\uffc3\027\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\046\uffc3\047\uffc3\050\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\056\uffc3\057\uffc3\060\uffc3\062\uffc3" +
    "\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\074\uffc3\075" +
    "\uffc3\001\002\000\030\012\uffaf\013\uffaf\014\uffaf\020\uffaf" +
    "\046\uffaf\051\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\075" +
    "\uffaf\001\002\000\030\012\076\013\100\014\116\020\124" +
    "\046\105\051\115\070\072\071\111\072\121\073\123\075" +
    "\071\001\002\000\030\012\uffb0\013\uffb0\014\uffb0\020\uffb0" +
    "\046\uffb0\051\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\075" +
    "\uffb0\001\002\000\030\012\uffb1\013\uffb1\014\uffb1\020\uffb1" +
    "\046\uffb1\051\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\075" +
    "\uffb1\001\002\000\056\002\uffcc\010\uffcc\011\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\026\uffcc\027\uffcc\042\uffcc\043\uffcc\044" +
    "\uffcc\052\uffcc\054\uffcc\056\uffcc\062\uffcc\063\uffcc\064\uffcc" +
    "\065\uffcc\066\uffcc\067\uffcc\074\uffcc\075\uffcc\001\002\000" +
    "\004\022\164\001\002\000\056\012\076\013\100\014\116" +
    "\020\124\021\103\023\uffd6\024\uffd6\025\074\030\073\035" +
    "\120\036\122\037\070\040\110\041\125\046\105\051\115" +
    "\055\055\070\072\071\111\072\121\073\123\075\071\001" +
    "\002\000\006\023\171\024\172\001\002\000\012\023\uffd7" +
    "\024\uffd7\027\uffd7\043\167\001\002\000\052\012\076\013" +
    "\100\014\116\020\124\021\103\025\074\030\073\035\120" +
    "\036\122\037\070\040\110\041\125\046\105\051\115\055" +
    "\055\070\072\071\111\072\121\073\123\075\071\001\002" +
    "\000\016\002\uffe7\023\uffe7\024\uffe7\027\uffe7\043\uffe7\056" +
    "\uffe7\001\002\000\054\012\076\013\100\014\116\020\124" +
    "\021\103\024\uffd6\025\074\030\073\035\120\036\122\037" +
    "\070\040\110\041\125\046\105\051\115\055\055\070\072" +
    "\071\111\072\121\073\123\075\071\001\002\000\016\002" +
    "\uffe5\023\uffe5\024\uffe5\027\uffe5\043\uffe5\056\uffe5\001\002" +
    "\000\004\024\174\001\002\000\016\002\uffe4\023\uffe4\024" +
    "\uffe4\027\uffe4\043\uffe4\056\uffe4\001\002\000\004\071\203" +
    "\001\002\000\030\012\076\013\100\014\116\020\124\046" +
    "\105\051\115\070\072\071\111\072\121\073\123\075\071" +
    "\001\002\000\004\071\200\001\002\000\072\002\uffc6\010" +
    "\uffc6\011\uffc6\022\uffc6\023\uffc6\024\uffc6\026\uffc6\027\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\046\uffc6\047\uffc6\050\uffc6\052" +
    "\uffc6\053\uffc6\054\uffc6\056\uffc6\057\uffc6\060\uffc6\062\uffc6" +
    "\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\074\uffc6\075" +
    "\uffc6\001\002\000\004\054\202\001\002\000\072\002\uffc7" +
    "\010\uffc7\011\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\027" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\056\uffc7\057\uffc7\060\uffc7\062" +
    "\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\074\uffc7" +
    "\075\uffc7\001\002\000\072\002\uffc5\010\uffc5\011\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\046\uffc5\047\uffc5\050\uffc5\052\uffc5\053\uffc5\054" +
    "\uffc5\056\uffc5\057\uffc5\060\uffc5\062\uffc5\063\uffc5\064\uffc5" +
    "\065\uffc5\066\uffc5\067\uffc5\074\uffc5\075\uffc5\001\002\000" +
    "\064\002\uffc9\010\uffc9\011\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\026\uffc9\027\uffc9\042\uffc9\043\uffc9\044\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\052\uffc9\054\uffc9\056\uffc9\062\uffc9\063\uffc9" +
    "\064\uffc9\065\uffc9\066\uffc9\067\uffc9\074\uffc9\075\uffc9\001" +
    "\002\000\004\026\206\001\002\000\054\012\076\013\100" +
    "\014\116\020\124\021\103\025\074\027\uffd6\030\073\035" +
    "\120\036\122\037\070\040\110\041\125\046\105\051\115" +
    "\055\055\070\072\071\111\072\121\073\123\075\071\001" +
    "\002\000\004\027\210\001\002\000\016\002\uffe3\023\uffe3" +
    "\024\uffe3\027\uffe3\043\uffe3\056\uffe3\001\002\000\004\051" +
    "\212\001\002\000\032\012\076\013\100\014\116\020\124" +
    "\046\105\051\115\052\uffda\070\072\071\111\072\121\073" +
    "\123\075\071\001\002\000\006\042\uffd9\052\uffd9\001\002" +
    "\000\006\042\217\052\uffdb\001\002\000\004\052\216\001" +
    "\002\000\016\002\uffdd\023\uffdd\024\uffdd\027\uffdd\043\uffdd" +
    "\056\uffdd\001\002\000\030\012\076\013\100\014\116\020" +
    "\124\046\105\051\115\070\072\071\111\072\121\073\123" +
    "\075\071\001\002\000\006\042\uffd8\052\uffd8\001\002\000" +
    "\072\002\uffca\010\uffca\011\uffca\022\uffca\023\uffca\024\uffca" +
    "\026\uffca\027\uffca\042\uffca\043\uffca\044\uffca\046\uffca\047" +
    "\uffca\050\uffca\052\uffca\053\176\054\uffca\056\uffca\057\177" +
    "\060\175\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067" +
    "\uffca\074\uffca\075\uffca\001\002\000\016\002\uffe2\023\uffe2" +
    "\024\uffe2\027\uffe2\043\uffe2\056\uffe2\001\002\000\004\071" +
    "\224\001\002\000\006\043\ufffb\045\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\012\002\005\003\004\004\010\005\006\001" +
    "\001\000\004\011\222\001\001\000\030\013\074\014\105" +
    "\020\116\021\113\022\112\023\111\024\106\025\103\026" +
    "\101\027\100\030\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\025\012\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\052\007\047\010\051\011\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\055\001\001\000\012\002\057\003\004\004\010" +
    "\005\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\065\011\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\021\221" +
    "\022\112\023\111\024\106\025\103\026\101\027\100\030" +
    "\076\001\001\000\010\026\220\027\100\030\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\204\022" +
    "\112\023\111\024\106\025\103\026\101\027\100\030\076" +
    "\001\001\000\002\001\001\000\012\025\203\026\101\027" +
    "\100\030\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\162\022" +
    "\112\023\111\024\106\025\103\026\101\027\100\030\076" +
    "\001\001\000\004\033\156\001\001\000\006\027\154\030" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\021\153\022\112\023\111\024\106\025\103\026\101\027" +
    "\100\030\076\001\001\000\002\001\001\000\004\032\145" +
    "\001\001\000\004\031\136\001\001\000\002\001\001\000" +
    "\022\021\127\022\112\023\111\024\106\025\103\026\101" +
    "\027\100\030\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\021\126\022\112\023\111\024\106\025\103" +
    "\026\101\027\100\030\076\001\001\000\002\001\001\000" +
    "\022\021\125\022\112\023\111\024\106\025\103\026\101" +
    "\027\100\030\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\132\022" +
    "\112\023\111\024\106\025\103\026\101\027\100\030\076" +
    "\001\001\000\002\001\001\000\022\021\152\022\112\023" +
    "\111\024\106\025\103\026\101\027\100\030\076\001\001" +
    "\000\002\001\001\000\022\021\151\022\112\023\111\024" +
    "\106\025\103\026\101\027\100\030\076\001\001\000\016" +
    "\023\140\024\106\025\103\026\101\027\100\030\076\001" +
    "\001\000\002\001\001\000\004\032\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\024\150\025\103\026\101\027\100\030\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\025\161\026" +
    "\101\027\100\030\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\013" +
    "\165\014\105\017\164\020\116\021\113\022\112\023\111" +
    "\024\106\025\103\026\101\027\100\030\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\167\020\116" +
    "\021\113\022\112\023\111\024\106\025\103\026\101\027" +
    "\100\030\076\001\001\000\002\001\001\000\032\013\165" +
    "\014\105\017\172\020\116\021\113\022\112\023\111\024" +
    "\106\025\103\026\101\027\100\030\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\021\200\022\112\023\111\024\106\025\103" +
    "\026\101\027\100\030\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\013" +
    "\165\014\105\017\206\020\116\021\113\022\112\023\111" +
    "\024\106\025\103\026\101\027\100\030\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\015\214\016\213\021\212\022\112\023\111\024\106\025" +
    "\103\026\101\027\100\030\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\021\217\022\112\023\111\024\106\025\103\026\101" +
    "\027\100\030\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorAST_Asc$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorAST_Asc$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorAST_Asc$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	errores = new GestionErroresTiny1();
	AnalizadorLexicoTiny1 alex = (AnalizadorLexicoTiny1) getScanner();
	alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	private GestionErroresTiny1 errores;
	public void syntax_error(Symbol unidadLexica) {
		errores.errorSintactico((UnidadLexica) unidadLexica);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorAST_Asc$actions {


	private SemOps sem = new SemOps();

  private final ConstructorAST_Asc parser;

  /** Constructor */
  CUP$ConstructorAST_Asc$actions(ConstructorAST_Asc parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST_Asc$do_action_part00000000(
    int                        CUP$ConstructorAST_Asc$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST_Asc$parser,
    java.util.Stack            CUP$ConstructorAST_Asc$stack,
    int                        CUP$ConstructorAST_Asc$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorAST_Asc$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorAST_Asc$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= Decs LInsts 
            {
              Prog RESULT =null;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		LInsts linsts = (LInsts)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.prog(decs, linsts);
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorAST_Asc$parser.done_parsing();
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decs ::= LDecs SEPSEC 
            {
              LDecs RESULT =null;
		LDecs ldecs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		 RESULT = ldecs; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Decs",1, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decs ::= 
            {
              LDecs RESULT =null;
		 RESULT = null; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Decs",1, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDecs ::= Dec 
            {
              LDecs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT =  sem.decs_una(dec); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("LDecs",2, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LDecs ::= LDecs PUNTOCOMA Dec 
            {
              LDecs RESULT =null;
		LDecs ldecs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT =  sem.decs_muchas(ldecs, dec); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("LDecs",2, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dec ::= VAR Tipo ID 
            {
              Dec RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.dec_var(tipo, id); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= TYPE Tipo ID 
            {
              Dec RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.dec_type(tipo, id); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Dec ::= PROC ID PAP ParamsF PCIE Bloque 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-4)).value;
		Paramsf paramsf = (Paramsf)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-2)).value;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.dec_proc(id, paramsf, bloque); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ParamsF ::= LParamsF 
            {
              Paramsf RESULT =null;
		Lparamsf lparamsf = (Lparamsf)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.paramsf_no_vacio(lparamsf); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("ParamsF",4, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ParamsF ::= 
            {
              Paramsf RESULT =null;
		 RESULT = sem.paramsf_vacio(); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("ParamsF",4, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LParamsF ::= ParamF 
            {
              Lparamsf RESULT =null;
		Paramf paramf = (Paramf)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.lparamsf_uno(paramf); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("LParamsF",5, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LParamsF ::= LParamsF COMA ParamF 
            {
              Lparamsf RESULT =null;
		Lparamsf lparamsf = (Lparamsf)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-2)).value;
		Paramf paramf = (Paramf)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.lparamsf_muchos(lparamsf, paramf); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("LParamsF",5, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ParamF ::= Tipo AMP ID 
            {
              Paramf RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.paramf_referencia(tipo, id); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("ParamF",6, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ParamF ::= Tipo ID 
            {
              Paramf RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.paramf_valor(tipo, id); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("ParamF",6, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= TIPOINT 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_int(); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= TIPOREAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_real(); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= TIPOBOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_bool(); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= TIPOSTRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_string(); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= ID 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.ref(id); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= ARRAY CAP ENTERO CCIE OF Tipo 
            {
              Tipo RESULT =null;
		StringLocalizado entero = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.tipo_array(entero, tipo); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= RECORD LLAP LTipos LLCIE 
            {
              Tipo RESULT =null;
		LTipos ltipos = (LTipos)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		 RESULT = sem.tipo_record(ltipos); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= POINTER Tipo 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.tipo_pointer(tipo); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Tipo",7, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LTipos ::= Tipo ID 
            {
              LTipos RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.tipos_uno(tipo, id); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("LTipos",8, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LTipos ::= LTipos PUNTOCOMA Tipo ID 
            {
              LTipos RESULT =null;
		LTipos ltipos = (LTipos)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.tipos_muchos(ltipos, tipo, id); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("LTipos",8, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LInsts ::= Inst 
            {
              LInsts RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.insts_una(inst); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("LInsts",9, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LInsts ::= LInsts PUNTOCOMA Inst 
            {
              LInsts RESULT =null;
		LInsts linsts = (LInsts)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-2)).value;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.insts_muchas(linsts, inst); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("LInsts",9, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Inst ::= E0 ASIG E0 
            {
              Inst RESULT =null;
		Exp exp0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-2)).value;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.inst_asig(exp0, exp1); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Inst ::= IF E0 THEN Insts ENDIF 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-3)).value;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		 RESULT = sem.inst_if(exp, insts); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Inst ::= IF E0 THEN Insts ELSE Insts ENDIF 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-5)).value;
		Insts insts0 = (Insts)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-3)).value;
		Insts insts1 = (Insts)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		 RESULT = sem.inst_if_else(exp, insts0, insts1); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Inst ::= WHILE E0 DO Insts ENDWHILE 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-3)).value;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		 RESULT = sem.inst_while(exp, insts); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Inst ::= READ E0 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.inst_read(exp); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Inst ::= WRITE E0 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.inst_write(exp); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Inst ::= NL 
            {
              Inst RESULT =null;
		 RESULT = sem.inst_nl(); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Inst ::= NEW E0 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.inst_new(exp); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Inst ::= DELETE E0 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.inst_delete(exp); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Inst ::= CALL ID PAP ParamsR PCIE 
            {
              Inst RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-3)).value;
		Paramsr paramsr = (Paramsr)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		 RESULT = sem.inst_call(id, paramsr); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Inst ::= Bloque 
            {
              Inst RESULT =null;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.inst_bloque(bloque); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Inst",10, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ParamsR ::= LParamsR 
            {
              Paramsr RESULT =null;
		Lparamsr lparamsr = (Lparamsr)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.paramsr_no_vacio(lparamsr); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("ParamsR",11, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ParamsR ::= 
            {
              Paramsr RESULT =null;
		 RESULT = sem.paramsr_vacio(); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("ParamsR",11, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LParamsR ::= E0 
            {
              Lparamsr RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.lparamsr_uno(exp); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("LParamsR",12, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LParamsR ::= LParamsR COMA E0 
            {
              Lparamsr RESULT =null;
		Lparamsr lparamsr = (Lparamsr)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-2)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.lparamsr_muchos(lparamsr, exp); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("LParamsR",12, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Insts ::= LInsts 
            {
              Insts RESULT =null;
		LInsts linsts = (LInsts)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.insts_no_vacia(linsts); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Insts",13, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Insts ::= 
            {
              Insts RESULT =null;
		 RESULT = sem.insts_vacia(); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Insts",13, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Bloque ::= LLAP S LLCIE 
            {
              Bloque RESULT =null;
		Prog prog = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		 RESULT = sem.bloque_no_vacio(prog); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Bloque",14, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Bloque ::= LLAP LLCIE 
            {
              Bloque RESULT =null;
		 RESULT = sem.bloque_vacio(); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("Bloque",14, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E0 ::= E1 MAS E0 
            {
              Exp RESULT =null;
		Exp exp0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.exp(op, exp0, exp1); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E0",15, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E0 ::= E1 MENOS E0 
            {
              Exp RESULT =null;
		Exp exp0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.exp(op, exp0, exp1); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E0",15, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E0",15, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E1 ::= E1 OpAI1 E2 
            {
              Exp RESULT =null;
		Exp exp0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.exp(op, exp0, exp1); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E1",16, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E1",16, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E2 ::= E2 OpAI2 E3 
            {
              Exp RESULT =null;
		Exp exp0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.exp(op, exp0, exp1); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E2",17, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E2",17, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E3 ::= E4 OpNA3 E4 
            {
              Exp RESULT =null;
		Exp exp0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.exp(op, exp0, exp1); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E3",18, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E3",18, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E4 ::= MENOS E5 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.menos(exp); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E4",19, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E4 ::= NOT E4 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.not(exp); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E4",19, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E4",19, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E5 ::= E5 CAP E0 CCIE 
            {
              Exp RESULT =null;
		Exp exp0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-3)).value;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		 RESULT = sem.indice(exp0, exp1); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E5",20, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E5 ::= E5 PUNTO ID 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.reg_punto(exp, id); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E5",20, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E5 ::= E5 FLECHA ID 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.reg_flecha(exp, id); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E5",20, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E5",20, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E6 ::= POR E6 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.indirecto(exp); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E6",21, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E6",21, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E7 ::= ENTERO 
            {
              Exp RESULT =null;
		StringLocalizado ent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.entero(ent); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E7 ::= REAL 
            {
              Exp RESULT =null;
		StringLocalizado re = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.real(re); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E7 ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = sem._true(); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E7 ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = sem._false(); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= CADENA 
            {
              Exp RESULT =null;
		StringLocalizado cad = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.cadena(cad); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= ID 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.peek()).value;
		 RESULT = sem.identif(id); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E7 ::= NULL 
            {
              Exp RESULT =null;
		 RESULT = sem._null(); 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E7 ::= PAP E0 PCIE 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST_Asc$stack.elementAt(CUP$ConstructorAST_Asc$top-1)).value;
		 RESULT = exp; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OpAI1 ::= AND 
            {
              String RESULT =null;
		 RESULT = "and"; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("OpAI1",23, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OpAI1 ::= OR 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("OpAI1",23, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OpAI2 ::= IGUAL 
            {
              String RESULT =null;
		 RESULT = "="; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("OpAI2",24, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OpAI2 ::= MENOR 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("OpAI2",24, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OpAI2 ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("OpAI2",24, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OpAI2 ::= MENIGUAL 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("OpAI2",24, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OpAI2 ::= MAYIGUAL 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("OpAI2",24, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OpAI2 ::= DIST 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("OpAI2",24, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OpNA3 ::= POR 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("OpNA3",25, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OpNA3 ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("OpNA3",25, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OpNA3 ::= MOD 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$ConstructorAST_Asc$result = parser.getSymbolFactory().newSymbol("OpNA3",25, RESULT);
            }
          return CUP$ConstructorAST_Asc$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorAST_Asc$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST_Asc$do_action(
    int                        CUP$ConstructorAST_Asc$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST_Asc$parser,
    java.util.Stack            CUP$ConstructorAST_Asc$stack,
    int                        CUP$ConstructorAST_Asc$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorAST_Asc$do_action_part00000000(
                               CUP$ConstructorAST_Asc$act_num,
                               CUP$ConstructorAST_Asc$parser,
                               CUP$ConstructorAST_Asc$stack,
                               CUP$ConstructorAST_Asc$top);
    }
}

